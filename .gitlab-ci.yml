stages:
  - build
  - test
  - deploy

build_image:
  stage: build
  image: docker
  services:
    - name: docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd $WORKING_DIR
  script:
    - docker build -t $CI_REGISTRY/$GITLAB_GROUP_ID/$GITLAB_PROJECT_ID/$IMAGE_NAME:$IMAGE_TAG -f Dockerfile .
    - docker push $CI_REGISTRY/$GITLAB_GROUP_ID/$GITLAB_PROJECT_ID/$IMAGE_NAME:$IMAGE_TAG
  variables:
    WORKING_DIR: app/details
    GITLAB_GROUP_ID: "k8s1940325"
    GITLAB_PROJECT_ID: "k8s-microservices"
    IMAGE_NAME: "microservice-details-app"
    IMAGE_TAG: "1.0.0"

static_analysis_kubesec:
  stage: test
  image: docker
  services:
    - name: docker:dind
  before_script:
    - cd $WORKING_DIR
  script:
    - docker run -i kubesec/kubesec:v2 scan /dev/stdin < simple.yaml
  variables:
    WORKING_DIR: cicd/gitlab/depl
  allow_failure: true

kubebench:
  stage: test
  image: docker
  services:
    - name: docker:dind
  before_script:
    - cd $WORKING_DIR
  script:
    - echo "kubebench test"
  variables:
    WORKING_DIR: cicd/gitlab/depl

deploy_k8s_apps:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config use-context $GITLAB_GROUP_ID/$GITLAB_PROJECT_ID:$GITLAB_K8S_AGENT_NAME
    - kubectl get nodes -o wide
    - kubectl apply -f cicd/gitlab/depl
  variables:
    GITLAB_GROUP_ID: "k8s1940325"
    GITLAB_PROJECT_ID: "k8s-connection"
    GITLAB_K8S_AGENT_NAME: k8s-connection